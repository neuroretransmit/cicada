2013-02-07 11:03:27.555 Sending line: '00 WELCOME Python'
2013-02-07 11:03:39.770 Received line: 'code\r\n'
2013-02-07 11:03:39.770 Sending line: '01 OK'
2013-02-07 11:03:39.770 Sending line: 'import sys, socket, threading, time, traceback, random, os'
2013-02-07 11:03:39.770 Sending line: ''
2013-02-07 11:03:39.770 Sending line: 'class Logger:'
2013-02-07 11:03:39.770 Sending line: '    def __init__(self, filename):'
2013-02-07 11:03:39.770 Sending line: '        self.filename = filename'
2013-02-07 11:03:39.771 Sending line: '        '
2013-02-07 11:03:39.771 Sending line: '    def log(self, s):'
2013-02-07 11:03:39.771 Sending line: '        t = time.time()'
2013-02-07 11:03:39.771 Sending line: '        stime = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(t)) + ".%03d" % (int((t * 1000)) % 1000)'
2013-02-07 11:03:39.771 Sending line: '        line = stime + " " + s'
2013-02-07 11:03:39.771 Sending line: '        '
2013-02-07 11:03:39.771 Sending line: '        of = open(self.filename, "ab")        '
2013-02-07 11:03:39.771 Sending line: '        of.write(line + "\\r\\n")'
2013-02-07 11:03:39.771 Sending line: '        of.close()'
2013-02-07 11:03:39.771 Sending line: '        print line'
2013-02-07 11:03:39.771 Sending line: '    '
2013-02-07 11:03:39.771 Sending line: 'class Server(threading.Thread):'
2013-02-07 11:03:39.771 Sending line: '    def __init__(self, csock, address, clientcounter):'
2013-02-07 11:03:39.772 Sending line: '        threading.Thread.__init__(self)'
2013-02-07 11:03:39.772 Sending line: ''
2013-02-07 11:03:39.772 Sending line: '        self.logger = Logger("logs/clientlog-%d-%d.txt" % (int(time.time()), clientcounter))'
2013-02-07 11:03:39.772 Sending line: '        self.csock = csock'
2013-02-07 11:03:39.772 Sending line: '        self.address = address'
2013-02-07 11:03:39.772 Sending line: ''
2013-02-07 11:03:39.772 Sending line: '    def logsend(self, s):'
2013-02-07 11:03:39.772 Sending line: '        self.logger.log("Sending line: " + repr(s))'
2013-02-07 11:03:39.773 Sending line: '        self.csock.sendall(s + "\\r\\n")'
2013-02-07 11:03:39.773 Sending line: '        '
2013-02-07 11:03:39.773 Sending line: '    def logrecv(self):'
2013-02-07 11:03:39.773 Sending line: '        line = ""'
2013-02-07 11:03:39.773 Sending line: '        while not line.endswith("\\r\\n"):'
2013-02-07 11:03:39.774 Sending line: '            try:'
2013-02-07 11:03:39.774 Sending line: '                data = self.csock.recv(1)'
2013-02-07 11:03:39.774 Sending line: '                if len(data) == 0:'
2013-02-07 11:03:39.774 Sending line: '                    self.logger.log("Client terminated connection, incomplete line: " + repr(line))'
2013-02-07 11:03:39.775 Sending line: '                    return None'
2013-02-07 11:03:39.775 Sending line: '            except socket.timeout:'
2013-02-07 11:03:39.775 Sending line: '                self.logger.log("Client timeout, incomplete line: " + repr(line))'
2013-02-07 11:03:39.775 Sending line: '                return None'
2013-02-07 11:03:39.776 Sending line: '                '
2013-02-07 11:03:39.776 Sending line: '            line += data'
2013-02-07 11:03:39.776 Sending line: '            '
2013-02-07 11:03:39.776 Sending line: '        self.logger.log("Received line: " + repr(line))'
2013-02-07 11:03:39.777 Sending line: '        return line.strip("\\r\\n")'
2013-02-07 11:03:39.777 Sending line: '        '
2013-02-07 11:03:39.777 Sending line: '    def handle_rand(self, parts):'
2013-02-07 11:03:39.777 Sending line: '        if len(parts) != 2:'
2013-02-07 11:03:39.777 Sending line: '            self.logsend("02 Invalid parameters")'
2013-02-07 11:03:39.778 Sending line: '            return True'
2013-02-07 11:03:39.778 Sending line: '            '
2013-02-07 11:03:39.778 Sending line: '        count = 0'
2013-02-07 11:03:39.778 Sending line: '        try:'
2013-02-07 11:03:39.779 Sending line: '            count = int(parts[1])'
2013-02-07 11:03:39.779 Sending line: '        except:'
2013-02-07 11:03:39.779 Sending line: '            self.logsend("02 Not an integer")'
2013-02-07 11:03:39.779 Sending line: '            return True'
2013-02-07 11:03:39.779 Sending line: '            '
2013-02-07 11:03:39.780 Sending line: '        self.logsend("01 OK")'
2013-02-07 11:03:39.780 Sending line: '        for i in xrange(count):'
2013-02-07 11:03:39.780 Sending line: '            s = str(ord(os.urandom(1)))'
2013-02-07 11:03:39.780 Sending line: '            self.logsend(s)'
2013-02-07 11:03:39.780 Sending line: '        self.logsend(".")'
2013-02-07 11:03:39.781 Sending line: '        return True'
2013-02-07 11:03:39.781 Sending line: '    '
2013-02-07 11:03:39.781 Sending line: '    def send_file(self, filename):'
2013-02-07 11:03:39.781 Sending line: '        self.logsend("01 OK")'
2013-02-07 11:03:39.781 Sending line: '        for line in open(filename, "rb"):'
2013-02-07 11:03:39.782 Sending line: '            line = line.strip("\\r\\n")'
2013-02-07 11:03:39.782 Sending line: '            self.logsend(line)'
2013-02-07 11:03:39.782 Sending line: '        self.logsend(".")'
2013-02-07 11:03:39.782 Sending line: '        return True'
2013-02-07 11:03:39.783 Sending line: '        '
2013-02-07 11:03:39.783 Sending line: '    def handle_base29(self, parts):'
2013-02-07 11:03:39.783 Sending line: '        if len(parts) != 2:'
2013-02-07 11:03:39.783 Sending line: '            self.logsend("02 Invalid parameters")'
2013-02-07 11:03:39.783 Sending line: '            return True'
2013-02-07 11:03:39.784 Sending line: '            '
2013-02-07 11:03:39.784 Sending line: '        n = 0'
2013-02-07 11:03:39.784 Sending line: '        try:'
2013-02-07 11:03:39.784 Sending line: '            n = int(parts[1])'
2013-02-07 11:03:39.785 Sending line: '        except:'
2013-02-07 11:03:39.785 Sending line: '            self.logsend("02 Not an integer")'
2013-02-07 11:03:39.785 Sending line: '            return True'
2013-02-07 11:03:39.785 Sending line: '        '
2013-02-07 11:03:39.785 Sending line: '        s = ""'
2013-02-07 11:03:39.786 Sending line: '        while n > 0:'
2013-02-07 11:03:39.786 Sending line: '            s = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZ"[n % 29] + s'
2013-02-07 11:03:39.786 Sending line: '            n /= 29'
2013-02-07 11:03:39.786 Sending line: '            '
2013-02-07 11:03:39.786 Sending line: '        if s == "":'
2013-02-07 11:03:39.787 Sending line: '            s = "0"'
2013-02-07 11:03:39.787 Sending line: '            '
2013-02-07 11:03:39.787 Sending line: '        self.logsend("01 OK " + s)'
2013-02-07 11:03:39.787 Sending line: '        return True'
2013-02-07 11:03:39.788 Sending line: '        '
2013-02-07 11:03:39.788 Sending line: '    def recv_file(self):'
2013-02-07 11:03:39.788 Sending line: '        self.logsend("01 OK")'
2013-02-07 11:03:39.788 Sending line: '        '
2013-02-07 11:03:39.788 Sending line: '        count = 1'
2013-02-07 11:03:39.789 Sending line: '        while True:'
2013-02-07 11:03:39.789 Sending line: '            filename = "received%d.txt" % count'
2013-02-07 11:03:39.789 Sending line: '            if not os.path.isfile(filename):'
2013-02-07 11:03:39.789 Sending line: '                break'
2013-02-07 11:03:39.789 Sending line: '            '
2013-02-07 11:03:39.790 Sending line: '            count += 1'
2013-02-07 11:03:39.790 Sending line: '            '
2013-02-07 11:03:39.790 Sending line: '        of = open(filename, "wb")'
2013-02-07 11:03:39.790 Sending line: '        while True:'
2013-02-07 11:03:39.791 Sending line: '            line = self.logrecv()'
2013-02-07 11:03:39.791 Sending line: '            if line is None:'
2013-02-07 11:03:39.791 Sending line: '                break'
2013-02-07 11:03:39.791 Sending line: '                '
2013-02-07 11:03:39.791 Sending line: '            if line == ".":'
2013-02-07 11:03:39.792 Sending line: '                break'
2013-02-07 11:03:39.792 Sending line: '                '
2013-02-07 11:03:39.792 Sending line: '            of.write(line + "\\r\\n")'
2013-02-07 11:03:39.792 Sending line: '                '
2013-02-07 11:03:39.792 Sending line: '        of.close()'
2013-02-07 11:03:39.793 Sending line: '        '
2013-02-07 11:03:39.793 Sending line: '        self.logsend("01 OK")'
2013-02-07 11:03:39.793 Sending line: '        return True'
2013-02-07 11:03:39.793 Sending line: '    '
2013-02-07 11:03:39.794 Sending line: '    def handle_dh(self, parts):'
2013-02-07 11:03:39.794 Sending line: '        if len(parts) != 2:'
2013-02-07 11:03:39.794 Sending line: '            self.logsend("02 Invalid parameters")'
2013-02-07 11:03:39.794 Sending line: '            return True'
2013-02-07 11:03:39.794 Sending line: '            '
2013-02-07 11:03:39.795 Sending line: '        p = 0'
2013-02-07 11:03:39.795 Sending line: '        try:'
2013-02-07 11:03:39.795 Sending line: '            p = int(parts[1])'
2013-02-07 11:03:39.795 Sending line: '        except:'
2013-02-07 11:03:39.795 Sending line: '            self.logsend("02 Not an integer")'
2013-02-07 11:03:39.796 Sending line: '            return True'
2013-02-07 11:03:39.796 Sending line: '        '
2013-02-07 11:03:39.796 Sending line: '        base = random.randint(2, p)'
2013-02-07 11:03:39.796 Sending line: '        a = random.randint(2, p)'
2013-02-07 11:03:39.797 Sending line: '        self.logger.log("Selected base %d and secret %d" % (base, a))'
2013-02-07 11:03:39.797 Sending line: '        '
2013-02-07 11:03:39.797 Sending line: '        A = pow(base, a, p)'
2013-02-07 11:03:39.797 Sending line: '        '
2013-02-07 11:03:39.797 Sending line: '        self.logsend("01 OK %d %d" % (base, A))'
2013-02-07 11:03:39.798 Sending line: '        '
2013-02-07 11:03:39.798 Sending line: '        line = self.logrecv()'
2013-02-07 11:03:39.798 Sending line: '        B = 0'
2013-02-07 11:03:39.798 Sending line: '        try:'
2013-02-07 11:03:39.798 Sending line: '            B = int(line)'
2013-02-07 11:03:39.799 Sending line: '        except:'
2013-02-07 11:03:39.799 Sending line: '            self.logsend("02 Not an integer")'
2013-02-07 11:03:39.799 Sending line: '            return True'
2013-02-07 11:03:39.799 Sending line: '            '
2013-02-07 11:03:39.800 Sending line: '        s = pow(B, a, p)'
2013-02-07 11:03:39.800 Sending line: '        '
2013-02-07 11:03:39.800 Sending line: '        self.logsend("03 DATA %d" % s)'
2013-02-07 11:03:39.800 Sending line: '        return True'
2013-02-07 11:03:39.801 Sending line: '    '
2013-02-07 11:03:39.801 Sending line: '    def handle_line(self, line):'
2013-02-07 11:03:39.801 Sending line: '        parts = line.split()'
2013-02-07 11:03:39.801 Sending line: '        if len(parts) == 0:'
2013-02-07 11:03:39.801 Sending line: '            self.logsend("02 No command specified")'
2013-02-07 11:03:39.802 Sending line: '            return True'
2013-02-07 11:03:39.802 Sending line: '            '
2013-02-07 11:03:39.802 Sending line: '        cmd = parts[0].lower()'
2013-02-07 11:03:39.802 Sending line: '        '
2013-02-07 11:03:39.802 Sending line: '        if cmd == "rand": # b'
2013-02-07 11:03:39.803 Sending line: '            return self.handle_rand(parts)'
2013-02-07 11:03:39.803 Sending line: '            '
2013-02-07 11:03:39.803 Sending line: '        elif cmd == "quine": # c'
2013-02-07 11:03:39.803 Sending line: '            return self.send_file("quine.py")'
2013-02-07 11:03:39.804 Sending line: '            '
2013-02-07 11:03:39.804 Sending line: '        elif cmd == "base29": # d'
2013-02-07 11:03:39.804 Sending line: '            return self.handle_base29(parts)'
2013-02-07 11:03:39.804 Sending line: '            '
2013-02-07 11:03:39.804 Sending line: '        elif cmd == "code": # e'
2013-02-07 11:03:39.805 Sending line: '            return self.send_file("server.py")'
2013-02-07 11:03:39.805 Sending line: '            '
2013-02-07 11:03:39.805 Sending line: '        elif cmd == "koan": # f'
2013-02-07 11:03:39.805 Sending line: '            return self.send_file("koan.txt")'
2013-02-07 11:03:39.806 Sending line: ''
2013-02-07 11:03:39.806 Sending line: '        elif cmd == "dh": # g'
2013-02-07 11:03:39.806 Sending line: '            return self.handle_dh(parts)'
2013-02-07 11:03:39.806 Sending line: '            '
2013-02-07 11:03:39.806 Sending line: '        elif cmd == "next": # i'
2013-02-07 11:03:39.807 Sending line: '            return self.recv_file()'
2013-02-07 11:03:39.807 Sending line: '            '
2013-02-07 11:03:39.807 Sending line: '        elif cmd == "goodbye": # j'
2013-02-07 11:03:39.807 Sending line: '            self.logsend("99 GOODBYE")'
2013-02-07 11:03:39.807 Sending line: '            return False'
2013-02-07 11:03:39.808 Sending line: '            '
2013-02-07 11:03:39.808 Sending line: '        else:'
2013-02-07 11:03:39.808 Sending line: '            self.logsend("02 No such command")'
2013-02-07 11:03:39.808 Sending line: '            return True'
2013-02-07 11:03:39.809 Sending line: '            '
2013-02-07 11:03:39.809 Sending line: '        return False'
2013-02-07 11:03:39.809 Sending line: '            '
2013-02-07 11:03:39.809 Sending line: '    def run(self):'
2013-02-07 11:03:39.809 Sending line: '        try:'
2013-02-07 11:03:39.810 Sending line: '            self.csock.settimeout(60 * 10)'
2013-02-07 11:03:39.810 Sending line: '        '
2013-02-07 11:03:39.810 Sending line: '            self.logsend("00 WELCOME Python")'
2013-02-07 11:03:39.810 Sending line: '            while True:'
2013-02-07 11:03:39.811 Sending line: '                line = self.logrecv()'
2013-02-07 11:03:39.811 Sending line: '                if line is None:'
2013-02-07 11:03:39.811 Sending line: '                    break'
2013-02-07 11:03:39.811 Sending line: '                '
2013-02-07 11:03:39.811 Sending line: '                res = self.handle_line(line)'
2013-02-07 11:03:39.812 Sending line: '                if res is not True:'
2013-02-07 11:03:39.812 Sending line: '                    break'
2013-02-07 11:03:39.812 Sending line: '                    '
2013-02-07 11:03:39.812 Sending line: '        except:'
2013-02-07 11:03:39.812 Sending line: '            self.logger.log("Encountered exception: " + repr(sys.exc_info()[:2]))'
2013-02-07 11:03:39.813 Sending line: '            print "Traceback:"'
2013-02-07 11:03:39.813 Sending line: '            print traceback.format_exc()'
2013-02-07 11:03:39.813 Sending line: '            '
2013-02-07 11:03:39.813 Sending line: '        self.logger.log("Closing connection and exiting")'
2013-02-07 11:03:39.814 Sending line: '        self.csock.close()'
2013-02-07 11:03:39.814 Sending line: '        return'
2013-02-07 11:03:39.814 Sending line: '    '
2013-02-07 11:03:39.814 Sending line: 'def main():'
2013-02-07 11:03:39.814 Sending line: '    logger = Logger("logs/mainlog.txt")'
2013-02-07 11:03:39.815 Sending line: '    '
2013-02-07 11:03:39.815 Sending line: '    clientcounter = 0'
2013-02-07 11:03:39.815 Sending line: '    '
2013-02-07 11:03:39.815 Sending line: '    ssock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)'
2013-02-07 11:03:39.815 Sending line: '    '
2013-02-07 11:03:39.816 Sending line: '    ssock.bind(("", 31415))'
2013-02-07 11:03:39.816 Sending line: '    ssock.listen(5)'
2013-02-07 11:03:39.816 Sending line: '    logger.log("Listerer started")'
2013-02-07 11:03:39.816 Sending line: '    '
2013-02-07 11:03:39.817 Sending line: '    while True:'
2013-02-07 11:03:39.817 Sending line: '        csock, address = ssock.accept()'
2013-02-07 11:03:39.817 Sending line: '        logger.log("Got connection from address " + repr(address))'
2013-02-07 11:03:39.817 Sending line: '        srv = Server(csock, address, clientcounter)'
2013-02-07 11:03:39.817 Sending line: '        srv.start()'
2013-02-07 11:03:39.818 Sending line: '        clientcounter += 1'
2013-02-07 11:03:39.818 Sending line: '        '
2013-02-07 11:03:39.818 Sending line: 'main()'
2013-02-07 11:03:39.818 Sending line: '.'
2013-02-07 11:03:46.519 Received line: 'goodbye\r\n'
2013-02-07 11:03:46.519 Sending line: '99 GOODBYE'
2013-02-07 11:03:46.519 Closing connection and exiting
